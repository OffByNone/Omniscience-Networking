{"version":3,"sources":["../lib/HttpRequestHandler.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;IAEP,kBAAkB;AACZ,UADN,kBAAkB,CACX,eAAe,EAAE,iBAAiB,EAAE;wBAD3C,kBAAkB;;AAEtB,MAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;AACxC,MAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;EAC5C;;cAJI,kBAAkB;;SAKV,uBAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE;AAC3D,OAAI,eAAe,YAAA,CAAC;;AAEpB,OAAI,OAAO,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE;AACtC,WAAO,CAAC,MAAM,GAAG,MAAM,CAAC;;kDAEL,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,SAAS,CAAC;;;;QAArE,IAAI;QAAE,IAAI;;AACf,QAAI,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC3D,QAAI,CAAC,QAAQ,EAAE;AACd,YAAO,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;AAC3C,YAAO;KACP;;AAED,mBAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;;AAEvD,WAAO,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;AACnC,WAAO,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;AACzC,WAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;AACjC,WAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;AAC7B,QAAI,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,EACnD,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,KAEtE,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC1B,MAEA,eAAe,GAAG,SAAS,CAAC;;AAE7B,UAAO,CAAC,KAAK,CAAC,aAAa,IAAI,SAAS,CAAC,UAAU,CAAC;AACpD,UAAO,CAAC,KAAK,CAAC,YAAY,IAAI,eAAe,CAAC,UAAU,CAAC;AACzD,UAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;;AAEzC,OAAI,OAAO,CAAC,KAAK,CAAC,YAAY,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE;;;AACtD,QAAI,UAAU,GAAG,oBAAA,IAAI,CAAC,gBAAgB,EAAC,KAAK,MAAA,sCAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAAC,CAAC;AACpE,WAAO,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AAC1D,WAAO,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC;AAChC,WAAO,CAAC,OAAO,CAAC,CAAC;IACjB;GACD;;;QA1CI,kBAAkB;;;AA8CxB,MAAM,CAAC,OAAO,GAAG,kBAAkB,CAAC","file":"HttpRequestHandler.js","sourcesContent":["\"use strict\";\r\n\r\nclass HttpRequestHandler {\r\n\tconstructor(networkingUtils, httpRequestParser) {\r\n\t\tthis._networkingUtils = networkingUtils;\r\n\t\tthis._httpRequestParser = httpRequestParser;\r\n\t}\r\n\thandleRequest(socket, eventData, request, success, failure) {\r\n\t\tlet packetBodyBytes;\r\n\r\n\t\tif (request.bytes.receivedTotal === 0) {\r\n\t\t\trequest.socket = socket;\r\n\r\n\t\t\tlet [head, body] = this._httpRequestParser.separateBodyFromHead(eventData);\r\n\t\t\tlet metadata = this._httpRequestParser.parseMetadata(head);\r\n\t\t\tif (!metadata) {\r\n\t\t\t\tfailure(request, \"metadata not parsable.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tpacketBodyBytes = this._networkingUtils.toBuffer(body);\r\n\r\n\t\t\trequest.headers = metadata.headers;\r\n\t\t\trequest.parameters = metadata.parameters;\r\n\t\t\trequest.method = metadata.method;\r\n\t\t\trequest.path = metadata.path;\r\n\t\t\tif (request.headers.hasOwnProperty('content-length'))\r\n\t\t\t\trequest.bytes.total = parseInt(request.headers['content-length'], 10);\r\n\t\t\telse\r\n\t\t\t\trequest.bytes.total = -1;\r\n\t\t}\r\n\t\telse\r\n\t\t\tpacketBodyBytes = eventData;\r\n\r\n\t\trequest.bytes.receivedTotal += eventData.byteLength;\r\n\t\trequest.bytes.receivedBody += packetBodyBytes.byteLength;\r\n\t\trequest.bytes.body.push(packetBodyBytes);\r\n\r\n\t\tif (request.bytes.receivedBody >= request.bytes.total) {\r\n\t\t\tlet mergedBody = this._networkingUtils.merge(...request.bytes.body);\r\n\t\t\trequest.body = this._networkingUtils.toString(mergedBody);\r\n\t\t\trequest.bytes.receivedTotal = 0; //reset back to 0 so we can handle a new request over the same connection.\r\n\t\t\tsuccess(request);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nmodule.exports = HttpRequestHandler;"]}