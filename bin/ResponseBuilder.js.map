{"version":3,"sources":["../lib/ResponseBuilder.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;AACb,IAAM,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;IAEnC,eAAe;AACT,WADN,eAAe,CACR,eAAe,EAAE;0BADxB,eAAe;;AAEnB,QAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;GACxC;;eAHI,eAAe;;WAIC,+BAAC,cAAc,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE;;AAE9D,UAAI,WAAW,GAAG,QAAQ,CAAC;AAC3B,UAAI,UAAU,GAAG,cAAc,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,mBAAmB,GAAG,SAAS,CAAC,eAAe,CAAC;AAC1G,UAAI,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,iBAAiB,GAAG,SAAS,CAAC,YAAY,CAAC;AACtG,UAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;;wCAEjB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;;;UAAvE,KAAK;UAAE,GAAG;;AACf,SAAG,GAAG,GAAG,IAAI,aAAa,CAAC;AAC3B,UAAI,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;;AAEzC,UAAI,OAAO,GAAG,MACP,SAAS,CAAC,WAAW,SAAI,UAAU,CAAC,IAAI,SAAI,UAAU,CAAC,MAAM,eACrD,SAAS,CAAC,UAAU,qBACd,WAAW,mBACb,UAAU,uBACN,YAAY,aAC/B,IAAI,aACJ,IAAI,oDAGP,CAAC;;AAER,UAAI,cAAc,CAAC,OAAO,CAAC,EAC1B,OAAO,CAAC,IAAI,2BAAyB,KAAK,SAAI,GAAG,SAAI,aAAa,CAAG,CAAC;;AAEvE,aAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,GAAG,SAAS,CAAC,mBAAmB,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC;KACnJ;;;SA/BC,eAAe;;;AAkCrB,MAAM,CAAC,OAAO,GAAG,eAAe,CAAC","file":"ResponseBuilder.js","sourcesContent":["\"use strict\";\r\nconst Constants = require('./Constants');\r\n\r\nclass ResponseBuilder {\r\n\tconstructor(networkingUtils) {\r\n\t\tthis._networkingUtils = networkingUtils;\r\n\t}\r\n\tcreateResponseHeaders(requestHeaders, mimetype, contentLength, eTag) {\r\n\t\t//todo: validate parameters\r\n        let contentType = mimetype;\r\n        let connection = requestHeaders['connection'] ? Constants.connectionKeepAlive : Constants.connectionClose;\r\n        let httpStatus = requestHeaders['range'] ? Constants.httpPartialStatus : Constants.httpOkStatus;\r\n\t\tlet date = new Date().toUTCString();\r\n\r\n\t\tlet [start, end] = this._networkingUtils.parseRange(requestHeaders['range']);\r\n\t\tend = end || contentLength;\r\n\t\tlet actualLength = Number(end) - Number(start);\r\n\r\n        let headers = [\r\n            `${Constants.httpVersion} ${httpStatus.code} ${httpStatus.reason}`,\r\n            `Server: ${Constants.serverName }`,\r\n            `Content-Type: ${contentType}`,\r\n            `Connection: ${connection}`,\r\n            `Content-Length: ${actualLength}`,\r\n\t\t\t`ETag: ${eTag}`,\r\n\t\t\t`Date: ${date}`,\r\n\t\t\t`Accept-Ranges: bytes`,\r\n\t\t\t`Cache-Control: no-cache`\r\n        ];\r\n\r\n\t\tif (requestHeaders['range'])\r\n\t\t\theaders.push(`Content-Range: bytes ${start}-${end}/${contentLength}`);\r\n\r\n\t\treturn this._networkingUtils.toByteArray(headers.join(Constants.headerLineDelimiter) + Constants.headerLineDelimiter + Constants.headerLineDelimiter);\r\n    }\r\n}\r\n\r\nmodule.exports = ResponseBuilder;"]}