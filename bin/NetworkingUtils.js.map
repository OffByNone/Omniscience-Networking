{"version":3,"sources":["../lib/NetworkingUtils.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AACb,MAAM,CAAC,OAAO,GAAG;AACb,eAAW,EAAE,qBAAU,YAAY,EAAE;AACjC,eAAO,IAAI,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,EAAE,UAAA,CAAC;mBAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;SAAA,CAAC,CAAC,CAAC;KAChF;AACD,YAAQ,EAAE,kBAAU,iBAAiB,EAAE;AACzC,YAAI,OAAO,iBAAiB,KAAK,QAAQ,EACxC,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,MAAM,CAAC;AACnD,YAAI,iBAAiB,YAAY,UAAU,EAC1C,OAAO,iBAAiB,CAAC,MAAM,CAAC,KAEhC,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAC/D;AACD,YAAQ,EAAE,kBAAU,WAAW,EAAE;AAC7B,YAAI,OAAO,GAAG,EAAE,CAAC;AACjB,YAAI,UAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;;AAE7C,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,OAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,OAAM,EAAE,CAAC,IAAI,MAAM;;AAC/D,mBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,MAAA,CAAnB,MAAM,qBAAiB,UAAU,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAC,CAAC,CAAC;SAAA,AAE7E,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC3B;AACD,SAAK,EAAE,iBAA2B;0CAAd,YAAY;AAAZ,wBAAY;;;AAC5B,eAAO,YAAY,CAAC,MAAM,CAAC,UAAC,QAAQ,EAAE,OAAO,EAAK;AAC9C,gBAAI,OAAO,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACvE,mBAAO,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACzC,mBAAO,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;AAC1D,mBAAO,OAAO,CAAC,MAAM,CAAC;SACzB,CAAC,CAAC;KACN;AACD,cAAU,EAAE,oBAAU,WAAW,EAAE;AACrC,YAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;;iCACP,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC;;;;YAA7C,SAAS;YAAE,QAAQ;;AACxB,YAAI,SAAS,CAAC,WAAW,EAAE,KAAK,OAAO,EAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;AAC1D,eAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACxB;;;AAGJ,iBAAa,EAAE,uBAAU,GAAG,EAAE;;AAE7B,eAAO,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC/B;CACD,CAAC","file":"NetworkingUtils.js","sourcesContent":["\"use strict\";\r\nmodule.exports = {\r\n    toByteArray: function (strToConvert) {\r\n        return new Uint8Array([].map.call(strToConvert || '', i => i.charCodeAt(0)));\r\n    },\r\n    toBuffer: function (stringOrByteArray) {\r\n\t\tif (typeof stringOrByteArray === \"string\")\r\n\t\t\treturn this.toByteArray(stringOrByteArray).buffer;\r\n\t\tif (stringOrByteArray instanceof Uint8Array)\r\n\t\t\treturn stringOrByteArray.buffer;\r\n\t\telse\r\n\t\t\tthrow new Error(\"argument must be of type string or Uint8Array\");\r\n    },\r\n    toString: function (arrayBuffer) {\r\n        let results = [];\r\n        let uint8Array = new Uint8Array(arrayBuffer);\r\n\r\n        for (let i = 0, length = uint8Array.length; i < length; i += 200000) //todo: figure out what this 200000 means, then move to constants\r\n            results.push(String.fromCharCode(...uint8Array.subarray(i, i + 200000)));\r\n\r\n        return results.join('');\r\n    },\r\n    merge: function (...arrayBuffers) {\r\n        return arrayBuffers.reduce((previous, current) => {\r\n            let smushed = new Uint8Array(previous.byteLength + current.byteLength);\r\n            smushed.set(new Uint8Array(previous), 0);\r\n            smushed.set(new Uint8Array(current), previous.byteLength);\r\n            return smushed.buffer;\r\n        });\r\n    },\r\n    parseRange: function (rangeHeader) {\r\n\t\tif (!rangeHeader) return [0, null];\r\n\t\tlet [rangeType, startEnd] = rangeHeader.split('=');\r\n\t\tif (rangeType.toLowerCase() !== \"bytes\") return [0, null];\r\n\t\treturn startEnd.split('-'); //returns [start,end]\r\n    },\r\n\r\n\t/* untestable */\r\n\tisArrayBuffer: function (obj) {\r\n\t\t//this is here because running jasmine cli (node) will cause it to blow up.\r\n\t\treturn ArrayBuffer.isView(obj);\r\n\t}\r\n};"]}